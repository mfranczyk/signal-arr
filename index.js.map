{"version":3,"sources":["src/Client.js","src/ConnectingMessageBuffer.js","src/Constants.js","src/EventEmitter.js","src/HubClient.js","src/HubProxy.js","src/PromiseMaker.js","src/Protocol.js","src/index.js","src/transports/LongPollingTransport.js","src/transports/NullTransport.js","src/transports/ServerSentEventsTransport.js","src/transports/Transport.js","src/transports/WebSocketTransport.js","src/transports/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import async from 'async';\nimport Logdown from 'logdown';\nimport request from 'superagent';\nimport PromiseMaker from './PromiseMaker';\nimport EventEmitter from './EventEmitter';\nimport ConnectingMessageBuffer from './ConnectingMessageBuffer';\nimport {CLIENT_STATES, CLIENT_EVENTS, CONNECTION_EVENTS, CLIENT_PROTOCOL_VERSION} from './Constants';\nimport {AvailableTransports} from './transports/index';\n\nexport const CLIENT_CONFIG_DEFAULTS = {\n  url: '/signalr',\n  logging: false,\n  logger: new Logdown({prefix: 'SignalR Client'}),\n  hubClient: false,\n  totalTransportConnectTimeout: 10000\n};\n\n/**\n * The public API for managing communications with a SignalR server\n * @class\n * @public\n */\nexport default class Client extends EventEmitter {\n  /**\n   * Initializes th' client object wit' userdefined options. Options can include a multitude 'o properties, includin' th' ship URL,\n   * a set transport protocol th' user wishes to use, a hub client, th' timeout to use when connection, 'n loggin' mechanisms.\n   * @param {Object} options Defines the options that the client will initialize with.\n   * @constructs\n   * @returns {Client} Returns a new client object.\n   */\n  constructor(options) {\n    super();\n    this._config = Object.assign({}, CLIENT_CONFIG_DEFAULTS, options || {});\n    this._logger = this._config.logger;\n    this.state = CLIENT_STATES.stopped;\n    this._connectingMessageBuffer = new ConnectingMessageBuffer(this, this.emit.bind(this, CLIENT_EVENTS.received));\n    this.connectionData = [];\n\n  }\n\n  /**\n   * Accessor fer th' state property 'o th' client. Sets th' state to newState 'n automatically emits th' correct events.\n   * @param {string} newState The new state of the client.\n   * @public\n   * @emits stateChanging\n   * @emits stateChanged\n   * @returns {void} Nothing is returned by this method.\n   */\n  set state(newState) {\n    if(!this._state) {\n      this._state = newState;\n    } else {\n      this.emit(CLIENT_EVENTS.stateChanging, {oldState: this.state, newState});\n      this._state = newState;\n      this.emit(CLIENT_EVENTS.stateChanged, newState);\n    }\n  }\n\n  /**\n   *Accessor fer th' state property 'o th' client. Returns th' current state 'o th' client.\n   * @returns {*} Returns the current state.\n   */\n  get state() {\n    return this._state;\n  }\n\n  /**\n   * Starts th' underlyin' connection to th' ship.\n   * @param {Object} options contains any updated treaty values that be used to start th' connection.\n   * @returns {Promise} that resolves once th' connection be opened successfully.\n   * @public\n   * @function\n   * @emits starting\n   * @emits started\n   * @emits error\n   */\n  start(options) {\n    this._config = Object.assign(this._config, options);\n    if(this.state !== CLIENT_STATES.stopped) {\n      this.emit(CLIENT_EVENTS.error);\n      throw new Error('The SignalR client is in an invalid state. You only need to call `start()` once and it cannot be called while reconnecting.');\n    }\n    this.emit(CLIENT_EVENTS.starting);\n    this.state = CLIENT_STATES.starting;\n    return this._negotiate()\n      .then(this._findTransport.bind(this))\n      .then(transport => {\n        this._logger.info(`Using the *${transport.constructor.name}*.`);\n        this._transport = transport;\n        this.emit(CLIENT_EVENTS.started);\n        this.state = CLIENT_STATES.started;\n        this._connectingMessageBuffer.drain();\n        return this;\n      });\n  }\n\n\n  /**\n   * Stops th' connection to th' ship\n   * @returns {Promise} that resolves once th' connection has closed successfully.\n   * @public\n   * @function\n   * @emits stopping\n   * @emits stopped\n   */\n  stop() {\n    if(this._transport) {\n      this.state = CLIENT_STATES.stopping;\n      this.emit(CLIENT_EVENTS.stopping);\n      this._transport.stop();\n      this.state = CLIENT_STATES.stopped;\n      this.emit(CLIENT_EVENTS.stopped);\n      this._logger.info('Client stopped');\n    }\n  }\n\n  /**\n   * Sends a message to th' connected ship if th' transport be valid.\n   * @param {object} data Th' message to send.\n   * @public\n   * @function\n   * @returns {void} Nothing is returned by this method.\n   * */\n  send(data) {\n    if(this._transport) {\n      this._transport.send(data);\n    }\n  }\n\n  /**\n   * A connnection and client event handler that is listening for an 'error' event.\n   * Event is emitted when an error is thrown.\n   * @param {function} callback Contains the error message. //TODO: Implement error events\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  error(callback) {\n    this.on(CLIENT_EVENTS.error, callback);\n  }\n\n  /**\n   * A client event handler that is listening for a 'starting' event.\n   * Event is emitted when the client begins initialization.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  starting(callback) {\n    this.on(CLIENT_EVENTS.starting, callback);\n  }\n\n  /**\n   * A client event handler that is listening for a 'started' event.\n   * Event is emitted once the client has secured a connection successfully.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  started(callback) {\n    this.on(CLIENT_EVENTS.started, callback);\n  }\n\n  /**\n   * A client event handler that is listening for a 'stopping' event.\n   * Event is emitted once the client has initiated a disconnect.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  stopping(callback) {\n    this.on(CLIENT_EVENTS.stopping, callback);\n  }\n\n  /**\n   * A client event handler that is listening for a 'stopped' event.\n   * Event is emitted once the client has successfully disconnected from the server.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  stopped(callback) {\n    this.on(CLIENT_EVENTS.stopped, callback);\n  }\n\n  /**\n   * A connection and client event handler that is listening for a 'receiving' event.\n   * Event is emitted whenever a message is received by the client from the server. (Message is in compressed, raw form from server).\n   * @param {function} callback Contains the compressed message data that the client is currently receiving.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  receiving(callback) {\n    this.on(CLIENT_EVENTS.receiving, callback);\n  }\n\n  /**\n   * A connection and client event handler that is listening for a 'received' event.\n   * Event is emitted whenever a message is received by the client from the server. (Message is decompressed by client, making it more managable).\n   * @param {function} callback Contains the received decompressed message data.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  received(callback) {\n    this.on(CLIENT_EVENTS.received, callback);\n  }\n\n  /**\n   * A connection and client event handler that is listening for a 'stateChanging' event.\n   * Event is emitted whenever the client's state or the connection's state is in the process of changing.\n   * @param {function} callback Contains both the old and new state.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  stateChanging(callback) {\n    this.on(CLIENT_EVENTS.stateChanging, callback);\n  }\n\n  /**\n   * A connection and client event handler that is listening for a 'stateChanged' event.\n   * Event is emitted whenever the client's state or the connection's state has changed.\n   * @param {function} callback Contains the new state.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  stateChanged(callback) {\n    this.on(CLIENT_EVENTS.stateChanged, callback);\n  }\n\n  /**\n   * A connection event handler that is listening for a 'disconnecting' event.\n   * Event is emitted once the connection is in the process of stopping, initiated by the user, or automatically if the connection is lost unexpectedly.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  disconnecting(callback) {\n    this.on(CONNECTION_EVENTS.disconnecting, callback);\n  }\n\n  /**\n   * A connection event handler that is listening for a 'disconnected' event.\n   * Event is emitted once the connection has been completely haulted by the uesr, or has been lost unexpectedly.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  disconnected(callback) {\n    this.on(CONNECTION_EVENTS.disconnected, callback);\n  }\n\n  /**\n   * A connection event handler that is listening for a 'reconnecting' event.\n   * Event is emitted if the connection has been lost unexpectedly and is automatically attempting to reconnect.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  reconnecting(callback) {\n    this.on(CONNECTION_EVENTS.reconnecting, callback);\n  }\n\n  /**\n   * A connection event handler that is listening for a 'reconnected' event.\n   * Event is emitted if the connection has been successfully re-established after an unexpected disconnect.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  reconnected(callback) {\n    this.on(CONNECTION_EVENTS.reconnected, callback);\n  }\n\n  /**\n   * A connection event listener that is listening for a 'connecting' event.\n   * Event is emitted if the user has used the client to try and negotiate a connection to a server.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  connecting(callback) {\n    this.on(CONNECTION_EVENTS.connecting, callback);\n  }\n\n  /**\n   * A connection event listener that is listening for a 'onConnected' event.\n   * Event is emitted if the connection to the server was successfully established.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  connected(callback) {\n    this.on(CONNECTION_EVENTS.onConnected, callback);\n  }\n\n  /**\n   * A connection event listener that is listeing for a 'connectionSlow' event.\n   * Currently not implemented.\n   * @param {function} callback Method that is executed once a starting event has been fired.\n   * @function\n   * @public\n   * @returns {void} Nothing is returned by this method.\n   */\n  connectionSlow(callback) {\n    this.on(CLIENT_EVENTS.connectionSlow, callback);\n  }\n\n  /**\n   * Negotiates th' request to th' ship 'n returns th' consequental promise that be created as a result.\n   * @returns {*} Returns the treaty for the server request.\n   * @protected\n   * @function\n   */\n  _negotiate() {\n    return request\n      .get(`${this._config.url}/negotiate`)\n      .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\n      .use(PromiseMaker)\n      .promise();\n  }\n\n  /**\n   * Takes a treaty (result 'o _negotiate()) 'n uses that 'n th' client configuration to find th' best transport protocol to use.\n   * A user may specify a transport as well if they would like to not use th' automated selection 'o one.\n   * @param {Object} treaty The result of the initial negotiation with the server.\n   * @returns {Promise} A promise that will automatically find the best connection type, or to use the one defined by the user.\n   * @function\n   * @private\n   */\n  _findTransport(treaty) {\n    return new Promise((resolve, reject) => {\n        const availableTransports = AvailableTransports();\n        if(this._config.transport && this._config.transport !== 'auto') {\n          const transportConstructor = availableTransports.filter(x => x.name === this._config.transport)[0];\n          if(transportConstructor) {\n            // If the transport specified in the config is found in the available transports, use it\n            const transport = new transportConstructor(this, treaty, this._config.url);\n            transport.start().then(() => resolve(transport));\n          } else {\n            reject(new Error(`The transport specified (${this._config.transport}) was not found among the available transports [${availableTransports.map(x => `'${x.name}'`).join(' ')}].`));\n          }\n        } else {\n          // Otherwise, Auto Negotiate the transport\n          this._logger.info(`Negotiating the transport...`);\n          async.detectSeries(availableTransports.map(x => new x(this, treaty, this._config.url)),\n            (t, c) => t.start().then(() => c(t)).catch(() => c()),\n            transport => transport ? resolve(transport) : reject('No suitable transport was found.'));\n        }\n      }\n    );\n  }\n}\n","import {CONNECTION_STATES} from './Constants';\n\nexport default class ConnectingMessageBuffer {\n  /**\n   * Takes the client and drainCallback and creates an efficient buffer for buffering recieved messages.\n   * @param {Client} client The current instance of the user's client.\n   * @param {bool} drainCallback A boolean to decide wherer to drain the buffer.\n   * @constructor\n   * @returns {ConnectingMessageBuffer} Creates a new ConnectingMessageBuffer.\n   */\n  constructor(client, drainCallback) {\n    this.buffer = [];\n    this.client = client;\n    this.drainCallback = drainCallback;\n  }\n\n  /**\n   * Attempts to add a passed in message to the buffer.\n   * @param {Object} message The message to be pushed into the buffer.\n   * @returns {boolean} Returns false if the client is currently not connecting.\n   * @function\n   * @public\n   */\n  tryBuffer(message) {\n    if(this.client.transport === CONNECTION_STATES.connecting) {\n      this.buffer.push(message);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Drains the current buffer and removes all messages.\n   * @function\n   * @public\n   * @returns {void} Method does not return any value.\n   */\n  drain() {\n    // Ensure that the connection is connected when we drain (do not want to drain while a connection is not active)\n    if(this.client.transport === CONNECTION_STATES.connected) {\n      while(this.buffer.length > 0) {\n        this.drainCallback(buffer.shift());\n      }\n    }\n  }\n}","export const CLIENT_PROTOCOL_VERSION = 1.3;\n\n/**\n * A collection of the different states a connection may be in.\n * @exports CONNECTION_STATES\n * @type {{connecting: number, connected: number, reconnecting: number, disconnected: number}}\n * @readonly\n * @public\n */\nexport const CONNECTION_STATES = {\n  connecting: 0,\n  connected: 1,\n  reconnecting: 2,\n  disconnected:4\n};\n/**\n * A collection of different states that the client may be in.\n * @exports CLIENT_STATES\n * @type {{starting: number, started: number, stopping: number, stopped: number}}\n * @readonly\n * @public\n */\nexport const CLIENT_STATES = {\n  starting: 8,\n  started: 16,\n  stopping: 32,\n  stopped: 64\n};\n\n/**\n * A collection of all of the currently defined events that may be fired off during different stages of a connection's lifecycle.\n * @exports CONNECTION_EVENTS\n * @type {{error: string, connectionSlow: string, connecting: string, onConnected: string, receiving: string, received: string, reconnecting: string, reconnected: string, stateChanging: string, stateChanged: string, disconnecting: string, disconnected: string}}\n * @readonly\n * @public\n */\nexport const CONNECTION_EVENTS = {\n  error: 'error',\n  connectionSlow: 'connectionSlow',\n  connecting: 'connecting',\n  onConnected: 'onConnected',\n  receiving: 'receiving',\n  received: 'received',\n  reconnecting: 'reconnecting',\n  reconnected: 'reconnected',\n  stateChanging: 'stateChanging',\n  stateChanged: 'stateChanged',\n  disconnecting: 'disconnecting',\n  disconnected: 'disconnected'\n};\n/**\n * A collection of all of the currently defined events that may be fired off during the different stages of the client's lifecycle.\n * @exports CLIENT_EVENTS\n * @type {{starting: string, started: string, stopping: string, stopped: string, error: string, stateChanging: string, stateChanged: string, receiving: string, received: string}}\n * @readonly\n * @public\n */\nexport const CLIENT_EVENTS = {\n  starting: 'starting',\n  started: 'started',\n  stopping: 'stopping',\n  stopped: 'stopped',\n  error: 'error',\n  stateChanging: 'stateChanging',\n  stateChanged: 'stateChanged',\n  receiving: 'receiving',\n  received: 'received'\n};\n\n/**\n * A collection of different messages that may be written to the console when certain conditions are met.\n * @exports RESOURCES\n * @type {{nojQuery: string, noTransportOnInit: string, errorOnNegotiate: string, stoppedWhileLoading: string, stoppedWhileNegotiating: string, errorParsingNegotiateResponse: string, errorDuringStartRequest: string, stoppedDuringStartRequest: string, errorParsingStartResponse: string, invalidStartResponse: string, protocolIncompatible: string, sendFailed: string, parseFailed: string, longPollFailed: string, eventSourceFailedToConnect: string, eventSourceError: string, webSocketClosed: string, pingServerFailedInvalidResponse: string, pingServerFailed: string, pingServerFailedStatusCode: string, pingServerFailedParse: string, noConnectionTransport: string, webSocketsInvalidState: string, reconnectTimeout: string, reconnectWindowTimeout: string}}\n * @readonly\n * @public\n */\nexport const RESOURCES = {\n  nojQuery: 'jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.',\n  noTransportOnInit: 'No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.',\n  errorOnNegotiate: 'Error during negotiation request.',\n  stoppedWhileLoading: 'The connection was stopped during page load.',\n  stoppedWhileNegotiating: 'The connection was stopped during the negotiate request.',\n  errorParsingNegotiateResponse: 'Error parsing negotiate response.',\n  errorDuringStartRequest: 'Error during start request. Stopping the connection.',\n  stoppedDuringStartRequest: 'The connection was stopped during the start request.',\n  errorParsingStartResponse: 'Error parsing start response: \\'{0}\\'. Stopping the connection.',\n  invalidStartResponse: 'Invalid start response: \\'{0}\\'. Stopping the connection.',\n  protocolIncompatible: 'You are using a version of the client that isn\\'t compatible with the server. Client version {0}, server version {1}.',\n  sendFailed: 'Send failed.',\n  parseFailed: 'Failed at parsing response: {0}',\n  longPollFailed: 'Long polling request failed.',\n  eventSourceFailedToConnect: 'EventSource failed to connect.',\n  eventSourceError: 'Error raised by EventSource',\n  webSocketClosed: 'WebSocket closed.',\n  pingServerFailedInvalidResponse: 'Invalid ping response when pinging server: \\'{0}\\'.',\n  pingServerFailed: 'Failed to ping server.',\n  pingServerFailedStatusCode: 'Failed to ping server.  Server responded with status code {0}, stopping the connection.',\n  pingServerFailedParse: 'Failed to parse ping server response, stopping the connection.',\n  noConnectionTransport: 'Connection is in an invalid state, there is no transport active.',\n  webSocketsInvalidState: 'The Web Socket transport is in an invalid state, transitioning into reconnecting.',\n  reconnectTimeout: 'Couldn\\'t reconnect within the configured timeout of {0} ms, disconnecting.',\n  reconnectWindowTimeout: 'The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.'\n};","import sum from 'lodash.sum';\nimport _ from 'lodash';\n\nexport default class EventEmitter {\n  constructor() {\n    this.observers = {};\n  }\n\n  /**\n   *Pushes an event to the passed in listener.\n   * @param {Object} event The event that was fired.\n   * @param {Object} listener The listener that the fired event will be pushed to.\n   * @function\n   * @public\n   * @returns {void} Method does not return a value.\n   */\n  on(event, listener) {\n    this.observers[event] = this.observers[event] || [];\n    this.observers[event].push(listener);\n  }\n\n  /**\n   * Removes an event from a passed in listener.\n   * @param {Object} event Event to be removed from the listener.\n   * @param {Object} listener The listener the event will be removed from.\n   * @function\n   * @public\n   * @returns {void} Method does not return a value.\n   */\n  off(event, listener) {\n    if (!this.observers[event]) {\n      return;\n    }\n    this.observers[event].forEach(() => {\n      if (! listener) {\n        delete this.observers[event];\n      } else {\n        var index = this.observers[event].indexOf(listener);\n        if (index > -1) {\n          this.observers[event].splice(index, 1);\n        }\n      }\n    });\n  }\n\n  /**\n   * Emits the passed in event to all observers.\n   * @param {Object} event The event to be broadcasted to all available observers.\n   * @param {Object} args A variable number of objects passed in to attatch.\n   * @function\n   * @public\n   * @returns {void} Returns if there is no current observers for the passed in event.\n   */\n  emit(event, ...args) {\n    if (!this.observers[event]) {\n      return;\n    }\n\n    this.observers[event].forEach(observer => observer(...args));\n  }\n\n  /**\n   * Returns the true number of current observers.\n   * @returns {int} The current number of observers.\n   * @function\n   * @public\n   */\n  numberOfObservers() {\n    if(_.map(this.observers).map(x => x.length).length === 0){\n      return 0;\n    } else{\n      return sum(_.map(this.observers).map(x => x.length));\n    }\n  }\n}","import request from 'superagent';\nimport Logdown from 'logdown';\nimport {CLIENT_PROTOCOL_VERSION} from './Constants';\nimport Client, {CLIENT_CONFIG_DEFAULTS} from './Client';\nimport HubProxy from './HubProxy';\nimport Protocol from './Protocol';\nimport PromiseMaker from './PromiseMaker';\nimport _ from 'lodash';\n\n\nexport const HUB_CLIENT_CONFIG_DEFAULTS = {\n  logger: new Logdown({prefix: 'SignalR Hub-Client'}),\n  hubClient: true\n};\n/**\n *Th' Client that be used fer Hub connections.\n * @class\n */\nexport default class HubClient extends Client {\n  /**\n   *Uses passed in configuration settin's to initialize th' HubClient. Attatches event handlers that handle client invocations sent from th' ship,\n   * as well as registerin' th' proxies fer each Hub on startup.\n   * @param {Object} options The initial options defined by the user to initialize the HubClient with.\n   * @constructor\n   */\n  constructor(options) {\n    super(options);\n    this._config = Object.assign({}, CLIENT_CONFIG_DEFAULTS, HUB_CLIENT_CONFIG_DEFAULTS, options || {});\n    // Object to store hub proxies for this connection\n    this.proxies = {};\n    this.invocationCallbackId = 0;\n    this.invocationCallbacks = {};\n    this.connectionData = [];\n\n    this.starting(() => {\n      this._logger.info(`Registering Hub Proxies...`);\n      this._registerHubProxies();\n    });\n\n    this.received((minData) => {\n      if(!minData || !minData.length) {\n        return;\n      }\n      _.each(minData, md => {\n        const data = Protocol.expandClientHubInvocation(md);\n        const proxy = this.proxies[data.Hub];\n        if(proxy) {\n          this._logger.info(`\\`${data.Hub}\\` proxy found, invoking \\`${data.Method}\\`.`);\n          const func = proxy.funcs[data.Method];\n          if(func) {\n            const arrrrgs = Array.prototype.join(...data.Args, ', ');\n            this._logger.info(`Invoking \\`${data.Method}(${arrrrgs})\\`. `);\n            func(data.State, ...data.Args);\n          } else {\n            this._logger.warn(`Client function not found for method \\`${data.Method}\\` on hub \\`${data.Hub}\\`.`);\n          }\n        } else {\n          this._logger.error(`Proxy for ${data.Hub} not found.`);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new hub proxy based on th' actual hub moniker.\n   * @param {string} hubName The name of the hub that the proxy will be created for.\n   * @returns {*|HubProxy} If th' proxy already exists, it return that individual proxy, else it creates a new one.\n   * @function\n   * @public\n   */\n  createHubProxy(hubName) {\n    const hubNameLower = hubName.toLowerCase();\n    this.connectionData.push({name: hubName});\n    return this.proxies[hubNameLower] || (this.proxies[hubNameLower] = new HubProxy(this, hubNameLower));\n  }\n\n  /**\n   * Calls th' base client's start method, initializin' th' connection. Currently unknown if extra code be needed.\n   * @param {Object} options Th' configuration to start th' client wit'.\n   * @returns {Promise} Returns a promise signifying that the connection has been intialized.\n   * @function\n   * @public\n   */\n  start(options) {\n    return super.start(options);\n    // TODO: figure out why this is needed/not needed\n    //.then(() => request\n    //  .get(`${this._config.url}/start`)\n    //  .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\n    //  .query({connectionData: JSON.stringify(this.connectionData)})\n    //  .query({connectionToken: this._transport.connectionToken})\n    //  .query({transport: this._transport.name})\n    //  .use(PromiseMaker)\n    //  .promise());\n  }\n\n  /**\n   *Overridden negotiate method that adds connectionData to th' initial query. ConnectionData holds th' names 'o th' current connected hubs.\n   * @returns {Promise} Returns the\n   * @private\n   * @function\n   */\n  _negotiate() {\n    return request\n      .get(`${this._config.url}/negotiate`)\n      .query({clientProtocol: CLIENT_PROTOCOL_VERSION})\n      .query({connectionData: JSON.stringify(this.connectionData)})\n      .use(PromiseMaker)\n      .promise();\n  }\n}\n","import {isEmpty, isFunction, isUndefined, extend} from 'lodash';\nimport Logdown from 'logdown';\nimport Protocol from './Protocol';\nimport EventEmitter from './EventEmitter';\n/**\n * A proxy that can be used to invoke methods server-side.\n * @class\n */\nexport default class HubProxy extends EventEmitter {\n  /**\n   * Initializes the proxy given the current client and the hub that the client is connected to.\n   * @param {Client} client The current HubClient that is initialized.\n   * @param {string} hubName The name of the hub that the user wishes to generate a proxy for.\n   * @constructor\n   */\n  constructor(client, hubName) {\n    super();\n    this._state = {};\n    this._client = client;\n    this._hubName = hubName;\n    this._logger = new Logdown({prefix: hubName});\n    this.funcs = {};\n    this.server = {};\n  }\n\n  /**\n   * Invokes a server hub method with the given arguments.\n   * @param {string} methodName The name of the server hub method\n   * @param {Object} args The arguments to pass into the server hub method.\n   * @returns {*} The return statement invokes the send method, which sends the information the server needs to invoke the correct method.\n   * @function\n   */\n  invoke(methodName, ...args) {\n    let data = {\n      H: this._hubName,\n      M: methodName,\n      A: args.map(a => (isFunction(a) || isUndefined(a)) ? null : a),\n      I: this._client.invocationCallbackId\n    };\n\n    const callback = minResult => {\n      return new Promise((resolve, reject) => {\n        const result = Protocol.expandServerHubResponse(minResult);\n\n        // Update the hub state\n        extend(this._state, result.State);\n\n        if(result.Progress) {\n          // TODO: Progress in promises?\n        } else if(result.Error) {\n          // Server hub method threw an exception, log it & reject the deferred\n          if(result.StackTrace) {\n            this._logger.error(`${result.Error}\\n${result.StackTrace}.`);\n          }\n          // result.ErrorData is only set if a HubException was thrown\n          const source = result.IsHubException ? 'HubException' : 'Exception';\n          const error = new Error(result.Error);\n          error.source = source;\n          error.data = result.ErrorData;\n          this._logger.error(`${this._hubName}.${methodName} failed to execute. Error: ${error.message}`);\n          reject(error);\n        } else {\n          // Server invocation succeeded, resolve the deferred\n          this._logger.info(`Invoked ${this._hubName}\\.${methodName}`);\n          return resolve(result.Result);\n        }\n      });\n    };\n\n    this._client.invocationCallbacks[this._client.invocationCallbackId.toString()] = {scope: this, method: callback};\n    this._client.invocationCallbackId += 1;\n\n    if(!isEmpty(this.state)) {\n      data.S = this.state;\n    }\n\n    this._logger.info(`Invoking ${this._hubName}\\.${methodName}`);\n    return this._client.send(data);\n  }\n\n\n}","export default function PromiseMaker(req) {\n  req.promise = function() {\n    return new Promise((resolve, reject) => {\n      req.end((err, res) => {\n        err = err || res.error;\n        if(err) {\n          reject(err);\n        } else {\n          resolve(res.body);\n        }\n      });\n    });\n  };\n}","import _ from 'lodash';\n/**\n * A utility tavern that contains methods fer decompressin'/compressin' incomin' 'n outgoin' messages.\n * @class\n * @exports Protocol\n */\nexport default class Protocol {\n  /**\n   * Decompresses a message received from the server that is meant to contain information about invoking a method client-side.\n   * @param {Object} compressedClientHubInvocation The compressed message received from the server.\n   * @returns {Object} The decompressed message from the server. Contains client-side method invocation data.\n   * @function\n   * @static\n   * @public\n   */\n  static expandClientHubInvocation(compressedClientHubInvocation) {\n    return {\n      Hub: compressedClientHubInvocation.H,\n      Method: compressedClientHubInvocation.M,\n      Args: compressedClientHubInvocation.A,\n      State: compressedClientHubInvocation.S\n    };\n  }\n\n  /**\n   * Decompresses a message received from a server hub into a more readible and workable form.\n   * @param {Object} compressedServerHubResponse The compressed, raw message received from the server.\n   * @returns {Object}  The decompressed message received from the server.\n   * @function\n   * @static\n   * @public\n   */\n  static expandServerHubResponse(compressedServerHubResponse) {\n    return {\n      State: compressedServerHubResponse.S,\n      Result: compressedServerHubResponse.R,\n      Progress: compressedServerHubResponse.P && {\n        Id: compressedServerHubResponse.P.I,\n        Data: compressedServerHubResponse.P.D\n      },\n      Id: compressedServerHubResponse.I,\n      IsHubException: compressedServerHubResponse.H,\n      Error: compressedServerHubResponse.E,\n      StackTrace: compressedServerHubResponse.T,\n      ErrorData: compressedServerHubResponse.D\n    };\n  }\n\n  /**\n   * Decompresses a response from the server to a more readible and workable form.\n   * @param {Object} min The message that has been received from the server.\n   * @returns {Object} The decompressed message received from the server.\n   * @function\n   * @static\n   * @public\n   */\n  static expandResponse(min) {\n    if(_.isString(min)) {\n      min = JSON.parse(min);\n    }\n    return {\n      messageId: min.C,\n      messages: min.M || [],\n      initialized: !_.isUndefined(min.S),\n      shouldReconnect: !_.isUndefined(min.T),\n      longPollDelay: min.L,\n      groupsToken: min.G\n    };\n  }\n}","import Client from './Client';\n\nexport default window.SignalArr = Client;\n","import _ from 'lodash';\nimport request from 'superagent';\nimport Transport from './Transport';\nimport PromiseMaker from '../PromiseMaker';\nimport {CONNECTION_STATES, CONNECTION_EVENTS} from '../Constants';\n\n\n/**\n * Th' long pollin' transport protocol.\n * @class\n */\nexport default class LongPollingTransport extends Transport {\n  static supportsKeepAlive = false;\n\n  /**\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new Longpollin' transport.\n   * @param {Client} client The current instance of the user's client.\n   * @param {Object} treaty An Object that is the result of the initial client-server negotiation. Contains vital connection information.\n   * @param {string} url The URL of the server the user wishes to connect to.\n   * @constructor\n   */\n  constructor(client, treaty, url) {\n    super('longPolling', client, treaty);\n    this._maxReconnectedTimeout = 3600000;\n    this._url = url;\n  }\n\n  /**\n   * Initiates th' long pollin' transport protocol fer th' current connection.\n   * @returns {Promise} That resolves once th' long pollin' transport has started successfully 'n has begun pollin'.\n   * @param {Promise} current The current connection promise.\n   * @private\n   * @function\n   */\n  _queryData(current) {\n    return current\n      .query({clientProtocol: 1.5})\n      .query({connectionToken: this._connectionToken})\n      .query({transport: 'longPolling'})\n      .query({connectionData: this._data || ''});\n  }\n\n  /**\n   *Initiates th' connection after th' LongPollin'Transport transport type be declared via th' initial negotiation.\n   * @returns {Promise.<T>} Resolves once the client has successfully connected and has started to poll the server for a response.\n   * @function\n   * @public\n   * @extends start\n   * @emits connected\n   */\n  start() {\n    if(this._pollTimeoutId) {\n      throw new Error('A polling session has already been initialized. Call `stop()` before attempting to `start()` again.');\n    }\n    this._logger.info(`*${this.constructor.name}* starting...`);\n    return this._connect()\n      //.then(this._startConnection.bind(this))\n      .then(() => {\n        this.state = CONNECTION_STATES.connected;\n        this.emit(CONNECTION_EVENTS.onConnected);\n        this._reconnectTries = 0;\n        this._reconnectTimeoutId = null;\n      })\n      .then(this._poll.bind(this));\n  }\n\n  /**\n   * Initiates th' long pollin' transport protocol fer th' current connection.\n   * @returns {Promise} that resolves once th' long pollin' transport has started successfully 'n has begun pollin'.\n   * @function\n   * @private\n   * @emits connecting\n   */\n  _connect() {\n    const url = this._url + '/connect';\n    this._logger.info(`Connecting to ${url}`);\n    this.state = CONNECTION_STATES.connecting;\n    this.emit(CONNECTION_EVENTS.connecting);\n    this._current = request\n      .post(url);\n    this._current = this._queryData(this._current);\n    return this._current\n      .use(PromiseMaker)\n      .promise()\n      .then(this._processMessages.bind(this));\n  }\n\n  //_startConnection() {\n  //  this._current = request\n  //    .post(this._url + '/start');\n  //  this._current = this._queryData(this._current);\n  //  return this._current\n  //    .use(PromiseMaker)\n  //    .promise();\n  //}\n\n  /**\n   * Initiates a poll to th' ship 'n hold th' poll open 'til th' ship be able to send new information.\n   * @returns {Promise} That resolves if th' client must reconnect due to bad connection.\n   * Else, th' method be called recursively after it recieves new information from th' ship.\n   * @emits reconnected\n   * @function\n   * @private\n   */\n  _poll() {\n    const poll = () => {\n      const {messageId, groupsToken, shouldReconnect} = this._lastMessages;\n      this._current = request\n        .post(this._url + '/poll');\n      this._current = this._queryData(this._current);\n      if(groupsToken) {\n        this._current = this._current\n          .send({messageId, groupsToken});\n      } else {\n        this._current = this._current\n          .send({messageId});\n      }\n      this._current = this._current\n        .end((err, res) => {\n          if(err && shouldReconnect) {\n            return this._reconnectTimeoutId = setTimeout(this._reconnect(), Math.min(1000 * (Math.pow(2, this._reconnectTries) - 1), this._maxReconnectedTimeout))\n              .then(this._poll);\n          }\n          if(res) {\n            if(this.state === CONNECTION_STATES.reconnecting) {\n              this.state = CONNECTION_STATES.connected;\n              this.emit(CONNECTION_EVENTS.reconnected);\n              this._reconnectTries = 0;\n            }\n            if(!_.isString(res.body)) {\n              this._processMessages(res.body);\n            }\n          }\n          if(!this._abortRequest) {\n            this._poll();\n          }\n        });\n\n    };\n    this._currentTimeoutId = setTimeout(poll.bind(this), 250);\n  }\n\n  /**\n   * Initiates th' long pollin' transport protocol fer th' current connection.\n   *  @param {data} data contains th' information that th' client wishes to send to th' ship.\n   *  @returns {Promise} that resolves once th' message has be sent..\n   *  @function\n   *  @public\n   *  @extends send\n   */\n  send(data) {\n    return request\n      .post(this._url + '/send')\n      .query({connectionToken: this._connectionToken})\n      .query({transport: 'longPolling'})\n      .send(`data=${JSON.stringify(data)}`)\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\n      .use(PromiseMaker)\n      .promise();\n  }\n\n  /**\n   * Initiates a reconnection to th' ship in th' case that th' connection be too slow or be lost completely.\n   *  @returns {Promise} that resolves once th' client has be successfully reconnected.\n   *  @function\n   *  @private\n   *  @emits reconnecting\n   */\n  _reconnect() {\n    const url = this._url + '/connect';\n    this.emit(CONNECTION_EVENTS.reconnecting);\n    this.state = CONNECTION_STATES.reconnecting;\n    this._logger.info(`Attempting to reconnect to ${url}`);\n    this._reconnectTries++;\n    this._current = request\n      .post(url);\n    this._current = this._queryData(this._current);\n\n    if((Math.min(1000 * (Math.pow(2, this._reconnectTries) - 1)) >= this._maxReconnectedTimeout)) {\n      this.stop();\n    }\n    return this._current\n      .use(PromiseMaker)\n      .promise()\n      .then(this._processMessages.bind(this));\n\n  }\n\n  /**\n   * Clears th' timeouts 'n stops th' connection to th' ship cleanly.\n   * @returns {Promise} Resolves once the transport has successfully halted.\n   * @public\n   * @function\n   * @extends stop\n   * @emits disconnecting\n   * @emits disconnected\n   */\n  stop() {\n    clearTimeout(this._currentTimeoutId);\n    clearTimeout(this._reconnectTimeoutId);\n    this._abortRequest = true;\n    if(this._current) {\n      this._current.abort();\n    }\n    this.emit(CONNECTION_EVENTS.disconnecting);\n    this._logger.info(`Disconnecting from ${this._url}.`);\n    this.state = CONNECTION_STATES.disconnected;\n    this.emit(CONNECTION_EVENTS.disconnected);\n    this._logger.info('Successfully disconnected.');\n  }\n}\n","import Transport from './Transport';\n/**\n * A default, empty transport.\n */\nexport default class NullTransport extends Transport {\n  static supportsKeepAlive = false;\n\n  constructor(client, treaty) {\n    super('null', client, treaty);\n  }\n}\n","import Transport from './Transport';\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\nimport EventSourcePolyfill from 'eventsource';\nimport request from 'superagent';\nimport PromiseMaker from '../PromiseMaker';\n\nconst EventSource = (typeof window !== 'undefined' && window.EventSource) || EventSourcePolyfill;\n/**\n * The ServerSentEvents transport protocol.\n */\nexport default class ServerSentEventsTransport extends Transport {\n  static supportsKeepAlive = true;\n\n  /**\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new ServerSentEvents transport.\n   * @param {Client} client The client that will be initiating the new ServerSentEvents connection.\n   * @param {Object} treaty An object that holds the reults from the original negotiation between client-server. Contains critical connection information.\n   * @param {string} url The URL of the server the client is connecting to.\n   * @constructor\n   */\n  constructor(client, treaty, url) {\n    super('serverSentEvents', client, treaty);\n    this._intentionallyClosed = null;\n    this._url = url;\n  }\n\n  /**\n   * Initates th' ServerSentEvents connection, as well as handles onmessage, onerror,  'n onopen events.\n   * @returns {Promise} Resolves when the client hasb een successfully connected to the server via a ServerSentEvents transport.\n   * @public\n   * @function\n   * @extends start\n   * @emits reconnecting\n   * @emits connecting\n   * @emits connected\n   * @emits reconnected\n   */\n  start(){\n    return new Promise((resolve, reject) => {\n      if(this._eventSource && this._intentionallyClosed) {\n        return reject(new Error('An EventSource has already been initialized. Call `stop()` before attempting to `start()` again.'));\n      }\n\n      this._logger.info(`*${this.constructor.name}* starting...`);\n      let url = this._url;\n      if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\n        this._logger.info(`Reconnecting to ${url}`);\n        url += `/reconnect?transport=serverSentEvents&connectionToken=${encodeURIComponent(this._connectionToken)}`;\n        this.emit(CONNECTION_EVENTS.reconnecting);\n      }else {\n        this._logger.info(`Connecting to ${url}`);\n        url += `/connect?transport=serverSentEvents&connectionToken=${encodeURIComponent(this._connectionToken)}`;\n        this.emit(CONNECTION_EVENTS.connecting);\n        this.state = CONNECTION_STATES.connecting;\n      }\n      url += '&tid=' + Math.floor(Math.random() * 11);\n\n      this._eventSource = new EventSource(url);\n      this._eventSource.onopen = e => {\n        if(e.type === 'open') {\n          this._logger.info(`*${this.constructor.name}* connection opened.`);\n          if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\n            this.emit(CONNECTION_EVENTS.reconnected);\n          } else {\n            this.emit(CONNECTION_EVENTS.onConnected);\n          }\n          this.state = CONNECTION_STATES.connected;\n          resolve();\n        }\n      };\n      this._eventSource.onmessage = e => {\n        if (e.data === 'initialized') {\n          return;\n        }\n        this._processMessages(e.data);\n      };\n      this._eventSource.onerror = e => {\n        this._logger.error(`*${this.constructor.name}* connection errored: ${e}`);\n      };\n    });\n  }\n\n  /**\n   * Cleanly disconnects from th' target ship.\n   * @returns {Promise} Resolves once the connection has been halted successfully.\n   * @function\n   * @public\n   * @extends stop\n   * @emits disconnecting\n   * @emits disconnected\n   */\n  stop(){\n    if(this._eventSource){\n      this.emit(CONNECTION_EVENTS.disconnecting);\n      this._intentionallyClosed = true;\n      this._eventSource.close();\n      this._logger.info(`*${this.constructor.name}* connection closed.`);\n      this.state = CONNECTION_STATES.disconnected;\n      this.emit(CONNECTION_EVENTS.disconnected);\n    }\n  }\n\n  /**\n   * Returns a promise that resolves when a message be sent with th' passed in data to th' target URL.\n   * @param {Object} data The message to send to the server.\n   * @returns {Promise} Resolves once the message has been sent successfully.\n   * @private\n   * @function\n   */\n  send(data) {\n    return request\n      .post(this._url + '/send')\n      .query({connectionToken: this._connectionToken})\n      .query({transport: 'serverSentEvents'})\n      .send(`data=${JSON.stringify(data)}`)\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\n      .use(PromiseMaker)\n      .promise();\n  }\n  /**\n   * If th' keepAlive times out, closes th' connection cleanly 'n attempts to reconnect.\n   * @private\n   * @returns {void} Method does not return a value.\n   * @emits disconnecting\n   */\n  _keepAliveTimeoutDisconnect(){\n    this.emit(CONNECTION_EVENTS.disconnecting);\n    this._intentionallyClosed = false;\n    this._eventSource.close();\n    this._logger.info(`*${this.constructor.name}* connection closed unexpectedly... Attempting to reconnect.`);\n    this.state = CONNECTION_STATES.reconnecting;\n    this._reconnectTimeoutId = setTimeout(this.start(), this._reconnectWindow);\n  }\n}\n","import Logdown from 'logdown';\nimport Protocol from '../Protocol';\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\nimport takeRight from 'lodash.takeright';\nimport EventEmitter from '../EventEmitter';\n\nexport default class Transport extends EventEmitter {\n  /**\n   * Initializes th' transport instance\n   * @param {string} name th' moniker 'o th' transport (must be th' same value as th' ship's correspondin' transport moniker)\n   * @param {Client} client th' parent SignalR client\n   * @param {Object} treaty th' response from th' negotiate request created by th' SignalR ship\n   * @constructor\n   */\n  constructor(name, client, treaty) {\n    super();\n    this.state = CONNECTION_STATES.disconnected;\n    this.name = name;\n    this._client = client;\n    this._logger = new Logdown({prefix: `${this.name}`});\n    this._abortRequest = false;\n    this._lastMessages = [];\n    this._keepAliveData = {};\n    this._connectionToken = treaty.ConnectionToken;\n    this._connectionId = treaty.ConnectionId;\n    this._reconnectWindow = (treaty.KeepAliveTimeout + treaty.DisconnectTimeout) * 1000;\n    this._keepAliveData = {\n      monitor: false,\n      activated: !!treaty.KeepAliveTimeout,\n      timeout: treaty.KeepAliveTimeout * 1000,\n      timeoutWarning: (treaty.KeepAliveTimeout * 1000) * (2 / 3),\n      transportNotified: false\n    };\n  }\n\n  /**\n   * Initiates a new transport 'n begins th' connection process.\n   *  @returns {Promise} that gunna reject due to th' method needin' to be overridden.\n   *  @abstract\n   *  @public\n   */\n  start() {\n    return new Promise((resolve, reject) => {\n      reject(new Error('Not Implemented: The `start()` function on the `Transport` class must be overridden in a derived type.'));\n    });\n  }\n\n  /**\n   * Accessor fer th' state property 'o th' transport. Sets th' state to newState 'n automatically emits th' correct events.\n   * @param {string} newState The new state of the connection.\n   * @emits stateChanging\n   * @emits stateChanged\n   * @public\n   * @returns {void} This method does not return a value directly, it is used as an accessor to set a new state.\n   */\n  set state(newState) {\n    if(!this._state) {\n      this._state = newState;\n    } else {\n      this.emit(CONNECTION_EVENTS.stateChanging, {oldState: this.state, newState});\n      this._state = newState;\n      this.emit(CONNECTION_EVENTS.stateChanged, newState);\n    }\n  }\n\n  /**\n   *Accessor fer th' state property 'o th' transport. Returns th' current state 'o th' client.\n   * @returns {string} Returns the current state of the connection\n   * @public\n   */\n  get state() {\n    return this._state;\n  }\n\n  /**\n   * Accessor fer th' connection token 'o th' transport. Returns th' current connection token 'o th' client.\n   * @returns {Object} Returns the current connection's transport token.\n   * @public\n   */\n  get connectionToken() {\n    return this._connectionToken;\n  }\n\n  /**\n   * Haults th' current connection 'n safely disconnects.\n   *  @returns {Promise} that gunna reject due to th' method needin' to be overridden.\n   *  @function\n   *  @abstract\n   *  @public\n   */\n  stop() {\n    return new Promise((resolve, reject) => {\n      reject(new Error('Not Implemented: The `stop()` function on the `Transport` class must be overridden in a derived type.'));\n    });\n  }\n\n  /**\n   * Sends a message to th' connected ship.\n   * @returns {Promise} thta gunna reject due to th' method needin' to be overridden.\n   * @function\n   * @abstract\n   * @public\n   */\n  send() {\n    return new Promise((resolve, reject) => {\n      reject(new Error('Not Implemented: The `send()` function on the `Transport` class must be overridden in a derived type.'));\n    });\n  }\n\n  /**\n   * Emits an event at both th' Transport 'n Client levels without needin' to invoke both emits seperately.\n   * @param {Object} event Th' event that be to be emitted.\n   * @param {Object} args Arguments that correspond to th' event.\n   * @function\n   * @public\n   * @extends emit\n   * @returns {void} This method does not return a value.\n   */\n  emit(event, ...args) {\n    this._client.emit(event, ...args);\n    super.emit(event, ...args);\n  }\n\n  /**\n   * Private method that takes a passed in compressed message (recieved from th' ship or other service), 'n decompresses it fer readability 'n use.\n   * Messages be also pushed into a buffer 'n timestamped as well.\n   * @param {Object} compressedResponse The compressed response from the server.\n   * @emits receiving\n   * @emits received\n   * @returns {void} Method does not return a value.\n   * @protected\n   * @function\n   */\n  _processMessages(compressedResponse) {\n    this.emit(CONNECTION_EVENTS.receiving, compressedResponse);\n    const expandedResponse = Protocol.expandResponse(compressedResponse);\n    this._lastMessageAt = new Date().getTime();\n    this._lastMessages = takeRight([...this._lastMessages, expandedResponse], 5);\n    this.emit(CONNECTION_EVENTS.received, expandedResponse.messages);\n  }\n\n  /**\n   * Accessor fer th' timestampin' th' last message recieved. Initiates a keepAlive timeout if keepAlive be supported by th' current transport type.\n   * @param {Object} newTimestamp A timestamp of the last received message.\n   * @private\n   * @function\n   * @returns {void} Method does not return a value.\n   */\n  set _lastMessageAt(newTimestamp) {\n    if(this._supportsKeepAlive()) {\n      this._keepAliveTimeoutId = setTimeout(this._keepAliveTimeoutDisconnect, this._keepAliveData.timeout);\n    }\n    this._latestMessageTime = newTimestamp;\n  }\n\n  /**\n   * Accessor that returns th' latest message's timestamp.\n   * @returns {Object} Returns the timestamp of the last received message.\n   * @private\n   */\n  get _lastMessageAt() {\n    return this._latestMessageTime;\n  }\n\n  /**\n   * Determines if th' current transport supports keepAlive functionality.\n   * @returns {*|ServerSentEventsTransport.supportsKeepAlive|LongPollingTransport.supportsKeepAlive|NullTransport.supportsKeepAlive|WebSocketTransport.supportsKeepAlive}\n   * Returns true if the transport type supports keepAlive or false if it does not.\n   * @private\n   */\n  _supportsKeepAlive() {\n    return this._keepAliveData.activated && this.supportsKeepAlive;\n  }\n}\n","import Transport from './Transport';\nimport {CONNECTION_EVENTS, CONNECTION_STATES} from '../Constants';\n\nexport default class WebSocketTransport extends Transport {\n  static supportsKeepAlive = true;\n\n  /**\n   * Uses th' current client, treaty from th' initial negotiation, 'n target URL to construct a new WebSocket transport.\n   * @param {Client} client The client that will be initiating the new WebSocketTransport connection.\n   * @param {Object} treaty An object that holds the reults from the original negotiation between client-server. Contains critical connection information.\n   * @param {string} url The URL of the server the client is connecting to.\n   * @constructor\n   */\n  constructor(client, treaty, url) {\n    super('webSockets', client, treaty);\n    this._intentionallyClosed = null;\n    this._url = url;\n  }\n\n  /**\n   * Returns a promise to send th' passed in data to th' target URL.\n   * @param {Object} data The message to send to the server.\n   * @returns {Promise} Promise that resolves once the message has been sent successfully.\n   * @private\n   * @function\n   * @extends send\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n      if(!this._socket) {\n        return reject(new Error('The WebSocket has not yet been initialized.'));\n      }\n      this._socket.send(JSON.stringify(data));\n      resolve();\n    });\n  }\n\n  /**\n   * Initates th' WebSocket connection, as well as handles onmessage, onerror, onclose, 'n onopen events.\n   * @returns {Promise} That resolves successfully once the client has been successfully connected to the server using the WebSocketsTransport.\n   * @public\n   * @fucntion\n   * @emits reconnecting\n   * @emits connecting\n   * @emits connected\n   * @emits reconnected\n   * @emits disconnected\n   * @extends start\n   */\n  start() {\n    return new Promise((resolve, reject) => {\n      if(!WebSocket) {\n        return reject(new Error('The type `WebSocket` could not be resolved.'));\n      }\n      if(this._socket && this._intentionallyClosed) {\n        return reject(new Error('A socket has already been initialized. Call `stop()` before attempting to `start()` again.'));\n      }\n\n      this._logger.info(`*${this.constructor.name}* starting...`);\n      let url = this._url.replace(/http(s)?:/, 'ws:');\n      this._logger.info(`Connecting to ${url}`);\n\n      if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\n        url += `/reconnect?transport=webSockets&connectionToken=${encodeURIComponent(this._connectionToken)}`;\n        this.emit(CONNECTION_EVENTS.reconnecting);\n      } else {\n        url += `/connect?transport=webSockets&connectionToken=${encodeURIComponent(this._connectionToken)}`;\n        this.emit(CONNECTION_EVENTS.connecting);\n        this.state = CONNECTION_STATES.connecting;\n      }\n      if(this._client.connectionData) {\n        url += `&connectionData=${JSON.stringify(this._client.connectionData)}`;\n      }\n      url += '&tid=' + Math.floor(Math.random() * 11);\n      this._socket = new WebSocket(url);\n      this._socket.onopen = e => {\n        if(e.type === 'open') {\n          this._logger.info(`*${this.constructor.name}* connection opened.`);\n          if(!this._intentionallyClosed && this.state === CONNECTION_STATES.reconnecting) {\n            this.emit(CONNECTION_EVENTS.reconnected);\n          } else {\n            this.emit(CONNECTION_EVENTS.onConnected);\n          }\n          this.state = CONNECTION_STATES.connected;\n          resolve();\n        }\n      };\n      this._socket.onmessage = e => {\n        this._processMessages(e.data);\n      };\n      this._socket.onerror = e => {\n        this._logger.error(`*${this.constructor.name}* connection errored: ${e}`);\n      };\n      this._socket.onclose = () => {\n        if(this._intentionallyClosed) {\n          this._logger.info(`*${this.constructor.name}* connection closed.`);\n          this.state = CONNECTION_STATES.disconnected;\n          this.emit(CONNECTION_EVENTS.disconnected);\n        } else {\n          this._logger.info(`*${this.constructor.name}* connection closed unexpectedly... Attempting to reconnect.`);\n          this.state = CONNECTION_STATES.reconnecting;\n          this._reconnectTimeoutId = setTimeout(this.start(), this._reconnectWindow);\n        }\n      };\n    });\n  }\n  /**\n   * Cleanly disconnects from th' target ship.\n   * @returns {Promise} Resolves once the connection has successfully halted.\n   * @function\n   * @public\n   * @extends stop\n   * @emits disconnecting\n   */\n  stop() {\n    if(this._socket) {\n      this.emit(CONNECTION_EVENTS.disconnecting);\n      this._intentionallyClosed = true;\n      this._socket.close();\n    }\n  }\n\n  /**\n   * If th' keepAlive times out, closes th' connection cleanly 'n attempts to reconnect.\n   * @private\n   * @returns {void} Method does not return a value.\n   * @emits disconnecting\n   */\n  _keepAliveTimeoutDisconnect() {\n    this.emit(CONNECTION_EVENTS.disconnecting);\n    this._socket.close();\n  }\n}\n\n","import ServerSentEventsTransport from './ServerSentEventsTransport';\nimport LongPollingTransport from './LongPollingTransport';\nimport WebSocketTransport from './WebSocketTransport';\nimport NullTransport from './NullTransport';\n\nexport function AvailableTransports() {\n  /*\n   // If jsonp with no/auto transport is specified, then set the transport to long polling\n   // since that is the only transport for which jsonp really makes sense.\n   // Some developers might actually choose to specify jsonp for same origin requests\n   // as demonstrated by Issue #623.\n   if(config.transport === 'auto' && config.jsonp === true) {\n   config.transport = 'longPolling';\n   }\n\n   // If the url is protocol relative, prepend the current windows protocol to the url.\n   if(this.url.indexOf('//') === 0) {\n   this.url = window.location.protocol + this.url;\n   _u.logger.info(`Protocol relative URL detected, normalizing it to \\`${this.url}\\`.`);\n   }\n\n   if(_u.isCrossDomain(this.url)) {\n   this.log('Auto detected cross domain url.');\n\n   if(config.transport === 'auto') {\n   // TODO: Support XDM with foreverFrame\n   config.transport = ['webSockets', 'serverSentEvents', 'longPolling'];\n   }\n\n   if(_u.isUndefined(config.withCredentials)) {\n   config.withCredentials = true;\n   }\n\n   // Determine if jsonp is the only choice for negotiation, ajaxSend and ajaxAbort.\n   // i.e. if the browser doesn't supports CORS\n   // If it is, ignore any preference to the contrary, and switch to jsonp.\n   if(!config.jsonp) {\n   config.jsonp = !_u.cors;\n\n   if(config.jsonp) {\n   this.log('Using jsonp because this browser doesn\\'t support CORS.');\n   }\n   }\n   }\n   */\n\n  return [\n    WebSocketTransport,\n    ServerSentEventsTransport,\n    LongPollingTransport,\n    NullTransport\n  ];\n}\n\n"]}